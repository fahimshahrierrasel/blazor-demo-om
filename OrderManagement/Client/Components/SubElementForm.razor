@using OrderManagement.DTO.Enums;
@using OrderManagement.DTO.Requests;

<div class="card border-info mt-3">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-12 clearfix">
                <h4 class="float-start">Sub-element</h4>
                <button type="button" class="btn btn-outline-danger float-end" hidden=@IsReadOnly @onclick="() => OnElementDelete.InvokeAsync(SubElement.Id)">Delete</button>
            </div>

            <div class="col">
                <label for="type" class="form-label">Type</label>
                <InputSelect @bind-Value="SubElement.Type" id="type" class="form-control" readonly=@IsReadOnly>
                    @foreach (var type in Enum.GetValues(typeof(ElementType)))
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
            </div>

            <div class="col">
                <label for="width" class="form-label">Width</label>
                <InputNumber @bind-Value="SubElement.Width" id="width" class="form-control" readonly=@IsReadOnly></InputNumber>
            </div>

            <div class="col">
                <label for="height" class="form-label">Height</label>
                <InputNumber @bind-Value="SubElement.Height" id="height" class="form-control" readonly=@IsReadOnly></InputNumber>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public SubElementRequest SubElement { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public EventCallback<Guid> OnElementDelete { get; set; }
}
